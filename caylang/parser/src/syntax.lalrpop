use crate::ast::{Expr, Literal, SuperIdent, Ident, ParamIdent, Pair, Guard, Clause, Function,
                 TypeDestructured, FoldExpr, Field, ClauseType, Destination,
                 LabelledList, UnlabelledList, stripstr, PrototypeDeclaration, TreePrototype,
                 Prototype, NodePrototype, NodeType, GetValue,
                 to_ident, as_labelled_list, force_expr_to_structure_list, force_expr_to_regex};
use std::str::FromStr;


grammar;

pub Main: Expr = Expr;

Expr: Expr = ClosedExpr+ => Expr::ExprList(<>);

ClosedExpr: Expr = {
    "(" <BasicExpr+> ")" => Expr::ExprList(<>),
    BasicExpr
}

BasicExpr: Expr = {
    SuperIdent => Expr::SuperIdent(<>),
    Literal => Expr::Literal(<>),
    LabelledList => Expr::LabelledList(<>),
    UnlabelledList => Expr::UnlabelledList(<>),
    Fold => Expr::Fold(<>),
    DirPrototype => Expr::PrototypeDeclaration(<>),
    FilePrototype => Expr::PrototypeDeclaration(<>),
    TreePrototype => Expr::PrototypeDeclaration(<>)
}

// Fold expression: introduces folding operation
Fold: FoldExpr = {
    "fold" <d:Literal> ":" <t:TypeDestructured> "{" <c:Clause+> "}" => FoldExpr {
        directory: match d {
            Literal::String(s) => s,
            _ => panic!("Expected string literal for directory path")
        },
        dir_type: t,
        clauses: c,
    }
}

DirPrototype: PrototypeDeclaration = {
    "DirectorySet" <name:Ident> <d:LabelledList> => {
        let names = d.get_value("Names");
        let regex = force_expr_to_regex(names);
        PrototypeDeclaration {
            name: SuperIdent::Ident(name),
            prototype: Prototype::NodePrototype(
                NodePrototype {regex, node_type: NodeType::Dir}
            )
        }
    }
}

FilePrototype: PrototypeDeclaration = {
    "FileSet" <name:Ident> <d:LabelledList> => {
        let names = d.get_value("Names");
        let regex = force_expr_to_regex(names);
        PrototypeDeclaration {
            name: SuperIdent::Ident(name),
            prototype: Prototype::NodePrototype(
                NodePrototype {regex, node_type: NodeType::File}
            )
        }
    }
}

TreePrototype: PrototypeDeclaration = {
    "TreeDirectorySet" <name:Ident> <d:LabelledList> => {
        let [names, structure] = d.get_values([to_ident("Names"), to_ident("Structure")]);
        let regex = force_expr_to_regex(names);
        let (layers, edges) = {
            if let Some(structure) = as_labelled_list(structure) {
                let [layers, edges] = structure.get_values([to_ident("layers"), to_ident("edges")]);
                    (force_expr_to_structure_list(layers),  force_expr_to_structure_list(edges))
            }
            else {
                (vec![], vec![])
            }
        };
        PrototypeDeclaration {
            name: SuperIdent::Ident(name),
            prototype: Prototype::TreePrototype(
                TreePrototype { regex, layers, edges }
            )
        }
    }
}



Field: Field = {
    // "as" is temporary
    <name:Ident> <alias:("as" <Ident>)?> => Field {<>}
}

#[inline]
TypeDestructured: TypeDestructured = {
    <name:SuperIdent> <fields:("{" <Comma<Field>> ".."? "}")?> => TypeDestructured {<>}
    // You can add more specific DirElement types here
}

Destination: Destination = {
    "." => Destination::NoChange,
    <Literal> => Destination::Move(<>),
}

// Each clause in a Fold expression
Clause: Clause = {
    <l:(<Ident> ":")?> <d:TypeDestructured> <g:Guard+> => Clause { destructured_type: d, child: ClauseType::Guarded(g), label: l },
    <l:(<Ident> ":")?> <d:TypeDestructured> <o:Arrows<Function>> "=>" <p:Destination> => Clause {destructured_type: d, child: ClauseType::FileRead(o, p), label: l},
    <l:(<Ident> ":")?> <d:TypeDestructured> "=>" "{" <c:Clause+> "}" => Clause {destructured_type: d, child: ClauseType::SubClause(c), label: l},
    <l:(<Ident> ":")?> <d:TypeDestructured> ";" <n:Clause> => Clause { destructured_type: d, child: ClauseType::SubClause(vec![n]), label: l },
}

Guard: Guard = {
    "|" <c:Ands<Function>> <o:Arrows<Function>> "=>" <a:Destination> => Guard {
        conditions: c,
        child: ClauseType::FileRead(o, a)
    },
    "|" <c:Ands<Function>> "=>" "{" <s:Clause+> "}" => Guard {
        conditions: c,
        child: ClauseType::SubClause(s)
    },
}

Function: Function = {
    <name:Ident> <args:ClosedExpr*> => Function {<>}
}

// "{" "}" refers to an empty unlabelled list
// currently no way to write an empty labelled list
UnlabelledList: UnlabelledList = "{" <Comma<Expr>> "}";
LabelledList: LabelledList = "{" <CommaM<Pair>> "}";

#[inline]
Pair: Pair = <i:Ident> ":" <e:Expr> => Pair(<>);
// these should probably be considered literals
// or part of a new CompoundLiteral enum

SuperIdent: SuperIdent = {
    ParamIdent => SuperIdent::ParamIdent(<>),
    Ident => SuperIdent::Ident(<>)
}

// secret sauce
Ident: Ident = {
    Variable => Ident::Variable(String::from(<>)),
    "_" => Ident::Ignored
}

#[inline]
Variable: String = r"[a-zA-Z_]+[a-zA-Z0-9_]*" => String::from(<>);

ParamIdent: ParamIdent = {
    <name:Variable> "<" <param:Literal> ">" => ParamIdent {<>}
}

Literal: Literal = {
    r"[0-9]*" => Literal::Integer(i32::from_str(<>).unwrap()),
    r"[0-9]+(?:\.[0-9]*)" => Literal::Numeric(f64::from_str(<>).unwrap()),
    r#""(?:[^\\"]|(?:\\"))*""# => Literal::String(stripstr(<>, 1)), // arbitrary characters between "", except " which must be preceded by \.
    r#"`(?:[^\\`]|(?:\\`))*`"# => Literal::FString(stripstr(<>, 1)),
    
    r#"r"(?:[^\\"]|(?:\\"))*""# => Literal::Regex(stripstr(<>, 2)), // could add regex for checking regex, rn same as string.
    r#"p"(?:[^\\"]|(?:\\"))*""# => Literal::Path(stripstr(<>, 2)), // can add path character set checking here from old fold regex, rn same as string.
}

// Comma Seperated Capture Rule of T, taken from LALRPOP documentation.
Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Arrows<T>: Vec<T> = { // (1)
    <v:( "=>" <T> )*> => v
};

Ands<T>: Vec<T> = { // (1)
    <mut v:(<T> "&&")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Comma Seperated Capture Rule of T, must have atleast one T, modified from above.
CommaM<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T> => { // (2)
            v.push(e);
            v
        }
};
