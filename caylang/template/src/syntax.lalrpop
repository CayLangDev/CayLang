use crate::ast::{TemplateLiteral, TemplatePart};
use std::str::FromStr;

grammar;

pub Main: TemplateLiteral = TemplateLiteral;

// do spaces fuck us here?
TemplateLiteral: TemplateLiteral = "`" <root: "/" ?> <p:SlashM<TemplatePart+>> "`" => TemplateLiteral {relative: root.is_some(), parts: p};

#[inline]
TemplatePart: TemplatePart = {
    r"\{[a-zA-Z_]+[a-zA-Z0-9_]*\}" => TemplatePart::LayerPart(<>.to_string()),
    r#"(?:[^\\`\{]|(?:\\`)|(?:\\`\{))*"# => TemplatePart::Text(<>.to_string())
}

// #[inline]
// Variable: String =  => String::from(<>);

// Slash Seperated Capture Rule of T, must have atleast one T, modified from Comma template in LARLPOP Documentation.

SlashM<T>: Vec<T> = { // (1)
    <mut v:(<T> "/")*> <e:T> => { // (2)
            v.push(e);
            v
        }
};
